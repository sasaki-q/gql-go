package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"
	"git/example.com/src/graph"
	"git/example.com/src/model"
)

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, userID int) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserByID - getUserById"))
}

// GetItems is the resolver for the getItems field.
func (r *queryResolver) GetItems(ctx context.Context) ([]*model.Item, error) {
	itemList := []*model.Item{}
	res := r.DB.Find(&itemList)

	if res.Error != nil {
		return nil, fmt.Errorf(res.Error.Error())
	}

	return itemList, nil
}

// GetItemWithPagination is the resolver for the getItemWithPagination field.
func (r *queryResolver) GetItemWithPagination(ctx context.Context, from int) (*model.ItemConnection, error) {
	itemList := []*model.Item{}

	res := r.DB.Limit(100).Offset(from).Find(&itemList)

	if res.Error != nil {
		return nil, fmt.Errorf(res.Error.Error())
	}

	return &model.ItemConnection{
		Items: itemList,
		PageInfo: &model.PageInfo{
			StartCursor: from,
			EndCursor:   itemList[len(itemList)-1].ID,
		},
	}, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
